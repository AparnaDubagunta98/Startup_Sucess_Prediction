# -*- coding: utf-8 -*-
"""Crunchbase_Data_Preprocessing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10NhMuhzbmC-finGE0tbhMvrJ_v6STi2u
"""

import pandas as pd
import numpy as np

rounds = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Crunchbase/crunchbase-data-master/rounds.csv")
investments = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Crunchbase/crunchbase-data-master/investments.csv")
companies = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Crunchbase/crunchbase-data-master/companies.csv")
additions = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Crunchbase/crunchbase-data-master/additions.csv")
acquisitions = pd.read_csv("/content/drive/My Drive/Colab Notebooks/Crunchbase/crunchbase-data-master/acquisitions.csv")

print("rounds: ",len(rounds))
print(len(rounds['company_name'].unique()))
print("investments: ",len(investments))
print(len(investments['company_name'].unique()))
print("companies: ",len(companies))
print(len(companies['name'].unique()))
print("additions: ",len(additions))
print("acquisitions: ",len(acquisitions))
print(len(acquisitions['company_name'].unique()))
False in rounds['company_name'].unique() == companies['name'].unique()

l = rounds['company_name'].unique()[:5]
for i in l:
  print(rounds[rounds['company_name'] == i])

all_companies = companies['name'].unique()
company_repeats = []
for i in range(len(all_companies)):
  if(len(companies[companies['name'] == all_companies[i]]) > 1):
    company_repeats.append(all_companies[i])

success_cols = ['company_name','company_code','category_list','total_funding_rounds','months_active','total_funds','burn_rate','status','target_variable']
success_data = pd.DataFrame()

companies.head(5)

rounds.head(1)

def fund_info(c):
  seed_fund = 0
  venture_funds = 0
  df = rounds[rounds['company_name'] == c]
  for i in list(df.index):
    type_fund = df.at[i,'funding_round_type']
    if(type_fund == 'seed'):
      seed_fund += df.at[i,'raised_amount_usd']
    elif(type_fund == 'venture'):
      venture_funds += df.at[i,'raised_amount_usd']
  if(np.isnan(seed_fund)):
    seed_fund = 0
  if(np.isnan(venture_funds)):
    venture_funds = 0
  # print("**********")
  # print(seed_fund)
  # print(venture_funds)
  total_funds = seed_fund + venture_funds
  return seed_fund, venture_funds,total_funds

# def calculate_months_active():

#   df = rounds[rounds['company_name'] == c]
#   founded
#   sd = 
#   end_date = datetime.datetime(2010,1,1)
#   start_date = datetime.datetime(2009, 4, 1)

#   num_months = (end_date.year - start_date.year) * 12 + (end_date.month - start_date.month)

code = 0
for i in range(len(companies)):
  c = companies.at[i,'name']
  cat = ''
  total_funding_rounds = 0
  status = ''
  if(c in repeats):
    df = companies[companies['name'] == c]
    cats = list(df['category_list'])
    funds = list(df['funding_rounds'])
    stat = list(df['status'])
    cat = max(cats,key=cats.count)
    total_funding_rounds = max(funds,key=funds.count)
    status = max(stat,key=stat.count)
    success_data.at[c,'company_name'] = c
    success_data.at[c,'company_code'] = code
    success_data.at[c,'category_list'] = cat
    success_data.at[c,'total_funding_rounds'] = total_funding_rounds
    success_data.at[c,'status'] = status
  else:
    success_data.at[c,'company_name'] = c
    success_data.at[c,'company_code'] = code
    success_data.at[c,'category_list'] = companies.at[i,'category_list']
    success_data.at[c,'total_funding_rounds'] = companies.at[i,'funding_rounds']
    success_data.at[c,'status'] = companies.at[i,'status']

  code +=1

l = [i for i in range(len(success_data))]
# success_data['idx'] = l
# success_data = success_data.set_index('idx')
# success_data.set_index(l)
success_data

companies['status'].unique()

def generate_target(c,status):
  icode = ''
  ic = list(investments[investments['company_name'] == c]['funding_round_code'])
  if(len(ic) == 0):
    icode = 0
  else:
    icode =  max(ic,key=ic.count)
  y1 = (status == 'acquired') or (status == 'ipo')
  y2 = (status == 'operating') and (icode == 'B')
  return (y1 or y2)

# 1. Remove redundant companies
# c1, c2 2 df records
# if founded at same time, same state, country

# cons_cols = ['status','founded_at']
# cols = list(companies.columns)
# def check_company(c1,c2):
for i in range(len(success_data)):
  c = success_data.at[i,'company_name']
  status = success_data.at[i,'status']
  target = generate_target(c,status)
  success_data.at[i,'target_variable'] = target

for i in range(len(success_data)):
  c = success_data.at[i,'company_name']
  seed_fund, venture_funds,total_funds = fund_info(c)
  print(seed_fund,venture_funds,total_funds)
  success_data.at[i,'seed_fund'] = seed_fund
  success_data.at[i,'venture_fund'] = venture_funds
  success_data.at[i,'total_funds'] = total_funds

success_data

success_data.to_csv("/content/drive/My Drive/Colab Notebooks/Crunchbase/crunchbase-data-master/success_data.csv",index=False)

success_data['seed_fund'].unique()

